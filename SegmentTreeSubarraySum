//Maximum Subarray Sum Query
class SegmentTree {

    class Node {
        long long prefix;
        long long suffix;
        long long total ;
        long long ans ;
    public:
        Node() {
            prefix =  suffix = total = ans = 0;
        }

        void init(long long val) {
            prefix =  suffix =  ans = max(0LL , val) ;
            total =  val ;
        }

        void combine(Node &left , Node &right) {
            prefix = max(left.prefix , left.total + right.prefix) ;
            suffix = max(right.suffix , left.suffix + right.total) ;
            total =  left.total + right.total ;
            ans =  max({left.ans , right.ans , left.suffix + right.prefix}) ;
        }
        long long Ans() {
            return ans  ;
        }
    };

    long long n ;
    vector<long long > arr;
    Node *tree ;

public:

    SegmentTree(vector<long long> &v) {
        n =  v.size() ;
        arr = v;
        tree = new Node[4 * n + 1 ] ;
        build(0 , n - 1 , 1) ;
    }

    void build(int s , int e , int node) {
        if (s == e) {
            tree[node].init(arr[s]) ;
            // cout<<s<<" "<<tree[node].Ans()<<ln ;
            return ;
        }
        int mid = (s + e) >> 1;
        build(s , mid , 2 * node) ;
        build(mid + 1  , e , 2 * node + 1 ) ;
        tree[node].combine(tree[2 * node] , tree[2 * node + 1 ]) ;
    }

    long long get(int qs , int qe , int ss , int se , int node) {
        // No overlap
        // doLazy(ss , se , node) ;

        if (se < qs or ss > qe) {
            return INT_MIN;
        }

        // Full OverLap
        if (qs <= ss and qe >= se) {
            return tree[node].Ans() ;
        }

        int mid = (ss + se) >> 1;
        long long left = get(qs , qe , ss , mid , 2 * node) ;
        long long right = get(qs , qe , mid + 1 , se  , 2 * node + 1 ) ;

        return max(tree[2 * node].Ans() , tree[2 * node + 1 ].Ans()) ;
    }

    // void update(int qs ,  int qe , long long add , int ss , int se , int node){
    // 	// Checking for any pending update.
    // 	// doLazy(ss , se , node) ;

    // 	if(se < qs or ss > qe)
    // 			return ;

    // 	if(qs <= ss and qe >= se){
    // 		tree[node] += add*(se - ss + 1 ) ;
    // 		if(ss != se){
    // 			lazy[2*node] += add ;
    // 			lazy[2*node + 1 ] += add ;
    // 		}
    // 		return ;
    // 	}

    // 	int mid =  (ss + se)>>1 ;
    // 	update(qs , qe , add , ss , mid , 2*node) ;
    // 	update(qs , qe , add , mid + 1 , se , 2*node + 1) ;

    // 	tree[node] =  tree[2*node] + tree[2*node + 1] ;
    // }

    void updatePoint(int pos , ll num , int ss , int se , int node) {
        if (ss == se) {
            tree[node].init(num) ;
            arr[pos] = num ;
            return ;
        }

        int mid = (ss + se) >> 1 ;

        if (pos <= mid)  updatePoint(pos , num , ss , mid , 2 * node) ;
        else            updatePoint(pos , num , mid + 1 , se , 2 * node + 1 ) ;
        tree[node].combine(tree[2 * node] ,  tree[2 * node + 1]) ;
    }
    // void doLazy(int ss , int se , int node){
    // 	if(lazy[node]){
    // 		tree[node] += (lazy[node]*(se - ss + 1)) ;
    // 		if(ss != se){
    // 			lazy[2*node] += lazy[node] ;
    // 			lazy[2*node + 1] += lazy[node] ;
    // 		}
    // 		else{
    // 			arr[ss] += lazy[node] ;
    // 		}
    // 		lazy[node] =  0;
    // 	}
    // }


    vector<long long > getArray() {
        return arr;
    }
};